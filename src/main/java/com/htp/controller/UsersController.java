package com.htp.controller;

import com.htp.controller.requests.SearchCriteria;
import com.htp.controller.requests.UserCreateRequest;
import com.htp.dao.hibernate.impl.HibernateUsersDaoImpl;
import com.htp.dao.jdbc.RolesDao;
import com.htp.dao.hibernate.HibernateUsersDao;
import com.htp.entity.Roles;
import com.htp.entity.Users;
import com.htp.dao.jdbc.UsersDao;
import com.htp.entity.hibernate.HibernateUsers;
import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.transaction.Transactional;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.List;

//@Controller
@RestController
@CrossOrigin
@RequestMapping(value = "/rest/users")
@RequiredArgsConstructor
public class UsersController {

    @Autowired
    private UsersDao userDao;

    @Autowired
    private HibernateUsersDao hibernateUserDao;

    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<Users>> getUsers() {
        return new ResponseEntity<>(userDao.findAll(), HttpStatus.OK);
    }

    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<HibernateUsers>> getHibernateUsers() {
        return new ResponseEntity<>(hibernateUserDao.findAll(), HttpStatus.OK);
    }

   @ApiOperation(value = "Get user from server by id")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful getting user"),
            @ApiResponse(code = 400, message = "Invalid User ID supplied"),
            @ApiResponse(code = 401, message = "Lol kek"),
            @ApiResponse(code = 404, message = "User was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<HibernateUsers> getUserById(@ApiParam("User Path Id") @PathVariable Long id) {
        HibernateUsers user = hibernateUserDao.findById(id);
        return new ResponseEntity<>(user, HttpStatus.OK);
    }


    private final RolesDao rolesDao;


    @PostMapping
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<Users> createUser(@RequestBody UserCreateRequest request) {
        Users user = new Users();
        //userID is empty - will be generated by DB
        user.setLogin(request.getLogin());
        user.setPassword(request.getPassword());
        user.setCreated(request.getCreated());
        user.setChanged(request.getChanged());
        user.setIsDeleted(request.getIsDeleted());
        user.setEMail(request.getEMail());
        user.setPhNumberUser(request.getPhNumberUser());

        Users savedUser = userDao.save(user);
        rolesDao.save(new Roles(savedUser.getId(), "ROLE_USER"));

        return new ResponseEntity<>(savedUser, HttpStatus.OK);
    }

    @PostMapping("/hibernate/create")
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<HibernateUsers> createHibernateUser(@RequestBody UserCreateRequest request) {
        HibernateUsers user = new HibernateUsers();
        //userID is empty - will be generated by DB
        user.setLogin(request.getLogin());
        user.setPassword(request.getPassword());
        user.setCreated(request.getCreated());
        user.setChanged(request.getChanged());
        user.setIs_deleted(request.getIsDeleted());
        user.setE_mail(request.getEMail());
        user.setPhone_number_user(request.getPhNumberUser());
        //user.setBirthDate(new Timestamp(new Date().getTime()));

        return new ResponseEntity<>(hibernateUserDao.save(user), HttpStatus.OK);
    }

    @ApiOperation(value = "Update user by userID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful user update 1111111"),
            @ApiResponse(code = 400, message = "Invalid User ID supplied 111111"),
            @ApiResponse(code = 404, message = "User was not found 111111"),
            @ApiResponse(code = 500, message = "Server error, something wrong 1111111")
    })
    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
    })
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Users> updateUser(@PathVariable("id") Long userId,
                                           @RequestBody UserCreateRequest request) {
        Users user = userDao.findById(userId);
        user.setLogin(request.getLogin());
        user.setPassword(request.getPassword());
        user.setCreated(request.getCreated());
        user.setChanged(request.getChanged());
        user.setIsDeleted(request.getIsDeleted());
        user.setEMail(request.getEMail());
        user.setPhNumberUser(request.getPhNumberUser());

        return new ResponseEntity<>(user, HttpStatus.OK);
    }

    @ApiOperation(value = "Update user by userID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful user update"),
            @ApiResponse(code = 400, message = "Invalid User ID supplied"),
            @ApiResponse(code = 404, message = "User was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "/hibernate/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibernateUsers> updateTestUser(@ApiParam(value = "User ID", required = false) @PathVariable("id") Long userId,
                                                   @RequestBody UserCreateRequest request) {

        hibernateUserDao.findById(userId);

        HibernateUsers user = new HibernateUsers();
        //userID is empty - will be generated by DB
        user.setLogin(request.getLogin());
        user.setPassword(request.getPassword());
        user.setCreated(request.getCreated());
        user.setChanged(request.getChanged());
        user.setIs_deleted(request.getIsDeleted());
        user.setE_mail(request.getEMail());
        user.setPhone_number_user(request.getPhNumberUser());

        return new ResponseEntity<>(hibernateUserDao.updateOne(user), HttpStatus.OK);
    }

    /*@ApiOperation(value = "Search user by query")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful user update"), //OK
            @ApiResponse(code = 400, message = "Invalid query supplied"), //Invalid request
            @ApiResponse(code = 404, message = "User was not found"), //Resourse not found
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @ApiImplicitParams({
            @ApiImplicitParam(name = "limit", value = "limit of users", required = true, dataType = "int", paramType = "query"),
            @ApiImplicitParam(name = "offset", value = "start node of users", required = true, dataType = "int", paramType = "query"),
            @ApiImplicitParam(name = "query", value = "search query", required = true, dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
    })
    @GetMapping("/search")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<Users>> searchUsers(@ApiIgnore @ModelAttribute SearchCriteria search) {
        List<Users> searchResult = userDao.search(
                                                    search.getQuery(),
                                                    search.getLimit(),
                                                    search.getOffset()
                                                    );
        return new ResponseEntity<>(searchResult, HttpStatus.OK);
    }*/

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteUser(@PathVariable("id") Long userId) {
        userDao.deleteById(userId);
        return new ResponseEntity<>(userId, HttpStatus.OK);
    }



/* PREVIOUS VARIANT


    private final UsersDao userDao;

    public UsersController(UsersDao userDao) {
        this.userDao = userDao;
    }

    *//*GET localhost:8080/HelloWeb/users/create*//*
    @RequestMapping(value = "/users/deleted", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public String printDeletedUsers(ModelMap model) {
        model.addAttribute("usersdeleted",
                userDao.findAllDeletedUsers().stream()
                        .map(Users::toString)
                        .collect(Collectors.joining("---"))
        );
        return "hello";
    }

    *//*GET localhost:8080/HelloWeb/users/all*//*
    @RequestMapping(value = "/users/all", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public String printAllUsers(ModelMap model) {
        model.addAttribute("usersreadall",
                userDao.findAll().stream()
                        .map(Users::toString)
                        .collect(Collectors.joining(","))
        );
        return "hello";}*/



}
