package com.htp.controller;

import com.htp.controller.requests.TrackingCreateRequest;
import com.htp.domain.hibernate.HibernateUsers;
import com.htp.repository.hibernate.impl.HibernateOrganizationsDaoImpl;
import com.htp.repository.hibernate.impl.HibernateTasksDaoImpl;
import com.htp.repository.hibernate.impl.HibernateTrackingDaoImpl;
import com.htp.repository.jdbc.TrackingDao;
import com.htp.domain.Tracking;
import com.htp.domain.hibernate.HibernateTracking;
import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.transaction.Transactional;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/tracking")
@RequiredArgsConstructor
public class TrackingController {

        private final TrackingDao trackingDao;

        private final HibernateTrackingDaoImpl hibernateTrackingDao;

        private final HibernateOrganizationsDaoImpl hibernateOrganizationsDao;

        private final HibernateTasksDaoImpl hibernateTasksDao;

        @GetMapping("/all")
        @ResponseStatus(HttpStatus.OK)
        public ResponseEntity<List<Tracking>> getTracking() {
            return new ResponseEntity<>(trackingDao.findAll(), HttpStatus.OK);
        }

        @GetMapping("/hibernate/all")
        @ResponseStatus(HttpStatus.OK)
        public ResponseEntity<List<HibernateTracking>> getHibernateTracking() {
            return new ResponseEntity<>(hibernateTrackingDao.findAll(), HttpStatus.OK);
        }

        @ApiOperation(value = "Get tracking from server by id")
        @ApiResponses({
                @ApiResponse(code = 200, message = "Successful getting tracking"),
                @ApiResponse(code = 400, message = "Invalid Tracking ID supplied"),
                @ApiResponse(code = 401, message = "Lol kek"),
                @ApiResponse(code = 404, message = "Tracking was not found"),
                @ApiResponse(code = 500, message = "Server error, something wrong")
        })
        @RequestMapping(value = "/getTrackingById/{id}", method = RequestMethod.GET)
        public ResponseEntity<Tracking> getTrackingById(@ApiParam("Tracking Path Id") @PathVariable Long id) {
            Tracking tracking = trackingDao.findById(id);
            return new ResponseEntity<>(tracking, HttpStatus.OK);
        }

        @ApiOperation(value = "Get tracking from server by id")
        @ApiResponses({
                @ApiResponse(code = 200, message = "Successful getting tracking"),
                @ApiResponse(code = 400, message = "Invalid Tracking ID supplied"),
                @ApiResponse(code = 401, message = "Lol kek"),
                @ApiResponse(code = 404, message = "Tracking was not found"),
                @ApiResponse(code = 500, message = "Server error, something wrong")
        })
        @RequestMapping(value = "/hibernate/getTrackingById/{id}", method = RequestMethod.GET)
        public ResponseEntity<HibernateTracking> getHibernateTrackingById(@ApiParam("Tracking Path Id") @PathVariable Long id) {
            HibernateTracking tracking = hibernateTrackingDao.findById(id);
            return new ResponseEntity<>(tracking, HttpStatus.OK);
        }


        @PostMapping("/create")
        @Transactional
        @ResponseStatus(HttpStatus.CREATED)
        public ResponseEntity<Tracking> createTracking(@RequestBody TrackingCreateRequest request) {
            Tracking t = new Tracking();
            //userID is empty - will be generated by DB
            t.setConfirmDate(new Timestamp(new Date().getTime()));
            t.setCost(request.getCost());
            t.setStatus(request.getStatus());
            t.setIdOrganaizer(request.getId_organaizer());
            t.setIdTask(request.getId_task());

            Tracking savedTracking = trackingDao.save(t);

            return new ResponseEntity<>(savedTracking, HttpStatus.OK);
        }

        @PostMapping("/hibernate/create")
        @Transactional
        @ResponseStatus(HttpStatus.CREATED)
        public ResponseEntity<HibernateTracking> createHibernateUser(@RequestBody TrackingCreateRequest request) {
            HibernateTracking t = new HibernateTracking();
            //userID is empty - will be generated by DB
            t.setConfirm_date(new Timestamp(new Date().getTime()));
            t.setCost(request.getCost());
            t.setStatus(request.getStatus());
            t.setOrganizations(hibernateOrganizationsDao.findById(request.getId_organaizer()));
            t.setTasks(hibernateTasksDao.findById(request.getId_task()));

            return new ResponseEntity<>(hibernateTrackingDao.save(t), HttpStatus.OK);
        }

        @ApiOperation(value = "Update Tracking by userID")
        @ApiResponses({
                @ApiResponse(code = 200, message = "Successful Tracking update 1111111"),
                @ApiResponse(code = 400, message = "Invalid Tracking ID supplied 111111"),
                @ApiResponse(code = 404, message = "Tracking was not found 111111"),
                @ApiResponse(code = 500, message = "Server error, something wrong 1111111")
        })
       /* @ApiImplicitParams({
                @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
        })*/
        @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT)
        @ResponseStatus(HttpStatus.OK)
        public ResponseEntity<Tracking> updateTracking(@PathVariable("id") Long id,
                                                @RequestBody TrackingCreateRequest request) {
            Tracking t = trackingDao.findById(id);

            t.setConfirmDate(new Timestamp(new Date().getTime()));
            t.setCost(request.getCost());
            t.setStatus(request.getStatus());
            t.setIdOrganaizer(request.getId_organaizer());
            t.setIdTask(request.getId_task());

            return new ResponseEntity<>(trackingDao.updateOne(t), HttpStatus.OK);
        }

        @ApiOperation(value = "Update Tracking by userID")
        @ApiResponses({
                @ApiResponse(code = 200, message = "Successful Tracking update 1111111"),
                @ApiResponse(code = 400, message = "Invalid Tracking ID supplied 111111"),
                @ApiResponse(code = 404, message = "Tracking was not found 111111"),
                @ApiResponse(code = 500, message = "Server error, something wrong 1111111")
        })
        @RequestMapping(value = "/hibernate/update/{id}", method = RequestMethod.PUT)
        @ResponseStatus(HttpStatus.OK)
        public ResponseEntity<HibernateTracking> updateHibernateTracking(@ApiParam(value = "Tracking ID", required = false) @PathVariable("id") Long id,
                                                                  @RequestBody TrackingCreateRequest request) {

            HibernateTracking t = hibernateTrackingDao.findById(id);

            t.setConfirm_date(new Timestamp(new Date().getTime()));
            t.setCost(request.getCost());
            t.setStatus(request.getStatus());
            t.setOrganizations(hibernateOrganizationsDao.findById(request.getId_organaizer()));
            t.setTasks(hibernateTasksDao.findById(request.getId_task()));

            return new ResponseEntity<>(hibernateTrackingDao.updateOne(t), HttpStatus.OK);
        }

    /*@ApiOperation(value = "Search user by query")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful user update"), //OK
            @ApiResponse(code = 400, message = "Invalid query supplied"), //Invalid request
            @ApiResponse(code = 404, message = "User was not found"), //Resourse not found
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @ApiImplicitParams({
            @ApiImplicitParam(name = "limit", value = "limit of users", required = true, dataType = "int", paramType = "query"),
            @ApiImplicitParam(name = "offset", value = "start node of users", required = true, dataType = "int", paramType = "query"),
            @ApiImplicitParam(name = "query", value = "search query", required = true, dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
    })
    @GetMapping("/search")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<Users>> searchUsers(@ApiIgnore @ModelAttribute SearchCriteria search) {
        List<Users> searchResult = userDao.search(
                                                    search.getQuery(),
                                                    search.getLimit(),
                                                    search.getOffset()
                                                    );
        return new ResponseEntity<>(searchResult, HttpStatus.OK);
    }*/

        @DeleteMapping("/delete/{id}")
        @ResponseStatus(HttpStatus.OK)
        public ResponseEntity<Long> deleteTracking(@PathVariable("id") Long Id) {
            trackingDao.deleteById(Id);
            return new ResponseEntity<>(Id, HttpStatus.OK);
        }

       /* @DeleteMapping("/hibernate/delete/{id}")
        @ResponseStatus(HttpStatus.OK)
        public ResponseEntity<Long> deleteHibernateTracking(@PathVariable("id") Long Id) {
            hibernateTrackingDao.deleteById(Id);
            return new ResponseEntity<>(Id, HttpStatus.OK);
        }*/

    






   /* PREVIOUS VARIANT



   private final TrackingDao trackingDao;

    public TrackingController(TrackingDao trackingDao) {
        this.trackingDao = trackingDao;
    }

    //http://localhost:8081/tracking/search?cost=100
    @RequestMapping(value = "/tracking/search", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public String printTrackingByCost(@RequestParam("cost") Long query, ModelMap model) {
        List<Tracking> search = trackingDao.trackingByHigherCost(query);
        model.addAttribute("bycost",
                StringUtils.join(search.stream().map(Tracking::toString).collect(Collectors.toList()), ","));
        return "hello";
    }

    *//*GET localhost:8081/tracking/all*//*
    @RequestMapping(value = "/tracking/all", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public String printAllTracking(ModelMap model) {
        model.addAttribute("trackingreadall",
                trackingDao.findAll().stream()
                        .map(Tracking::toString)
                        .collect(Collectors.joining(","))
        );
        return "hello";
    }*/
}
