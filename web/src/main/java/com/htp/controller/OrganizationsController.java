package com.htp.controller;

import com.htp.controller.requests.organizations.OrganizationsCreateRequest;
import com.htp.controller.requests.organizations.OrganizationsUpdateRequest;
import com.htp.domain.Organizations;
import com.htp.domain.hibernate.HibernateOrganizations;
import com.htp.repository.jdbc.OrganizationsDao;
import com.htp.repository.springdata.HibernateOrganizationsRepository;
import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.transaction.Transactional;
import javax.validation.Valid;
import java.util.List;

import static org.springframework.http.HttpStatus.CREATED;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/organizations")
@RequiredArgsConstructor
public class OrganizationsController {

    private final OrganizationsDao organizationsDao;

    private final ConversionService conversionService;

    private final HibernateOrganizationsRepository hibernateOrganizationsRepository;

    /*JDBC*/
    /*FindAll*/
    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<Organizations>> getOrganizations() {
        return new ResponseEntity<>(organizationsDao.findAll(), HttpStatus.OK);
    }

    /*FindById*/
    @ApiOperation(value = "Get Organizations from server by id")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful getting Organizations"),
            @ApiResponse(code = 400, message = "Invalid Organizations ID supplied"),
            @ApiResponse(code = 401, message = "Lol kek"),
            @ApiResponse(code = 404, message = "Organizations was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "/getOrganizationsById/{id}", method = RequestMethod.GET)
    public ResponseEntity<Organizations> getOrganizationById(@ApiParam("Organization Path Id") @PathVariable Long id) {
        Organizations organizations = organizationsDao.findById(id);
        return new ResponseEntity<>(organizations, HttpStatus.OK);
    }

    /*Create*/
    @PostMapping("/create")
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<Organizations> createOrganizations(@RequestBody OrganizationsCreateRequest request) {
        Organizations t = new Organizations();
        //userID is empty - will be generated by DB
        t.setName(request.getName());
        t.setWebSite(request.getWebSite());
        t.setPhoneNumber(request.getPhoneNumber());
        t.setLocation(request.getLocation());
        t.setWorkingTime(request.getWorkingTime());
        t.setSpecialize(request.getSpecialize());
        t.setEMail(request.getE_Mail());

        return new ResponseEntity<>(organizationsDao.save(t), HttpStatus.OK);
    }

    /*Update*/
    @ApiOperation(value = "Update Organization by userID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful Organization update 1111111"),
            @ApiResponse(code = 400, message = "Invalid Organization ID supplied 111111"),
            @ApiResponse(code = 404, message = "Organization was not found 111111"),
            @ApiResponse(code = 500, message = "Server error, something wrong 1111111")
    })
        /*@ApiImplicitParams({
                @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
        })*/
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Organizations> updateOrganization(@PathVariable("id") Long id,
                                                            @RequestBody OrganizationsCreateRequest request) {
        Organizations t = organizationsDao.findById(id);
        t.setName(request.getName());
        t.setWebSite(request.getWebSite());
        t.setPhoneNumber(request.getPhoneNumber());
        t.setLocation(request.getLocation());
        t.setWorkingTime(request.getWorkingTime());
        t.setSpecialize(request.getSpecialize());
        t.setEMail(request.getE_Mail());

        return new ResponseEntity<>(organizationsDao.updateOne(t), HttpStatus.OK);
    }

    /*Delete*/
    @DeleteMapping("/delete/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteOrganization(@PathVariable("id") Long id) {
        organizationsDao.deleteById(id);
        return new ResponseEntity<>(id, HttpStatus.OK);
    }

    /*SPRING DATA*/

    /*FindAll*/
    @GetMapping("/spring-data/all")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<HibernateOrganizations>> getHibernatesOrganizationsRepository() {
        return new ResponseEntity<>(hibernateOrganizationsRepository.findAll(), HttpStatus.OK);
    }

    /*FindAll(pageable)*/
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query",
                    value = "Results page you want to retrieve (0..N)"),
            @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query",
                    value = "Number of records per page."),
            @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query",
                    value = "Sorting criteria in the format: property(,asc|desc). " +
                            "Default sort order is ascending. " +
                            "Multiple sort criteria are supported.")
    })
    @GetMapping("/spring-data/all(pageable)")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Page<HibernateOrganizations>> getOrganizationsSpringData(@ApiIgnore Pageable pageable) {
        return new ResponseEntity<>(hibernateOrganizationsRepository.findAll(pageable), HttpStatus.OK);
    }

    /*FindById*/
    @ApiOperation(value = "Get from server by id")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful getting Organizations"),
            @ApiResponse(code = 400, message = "Invalid Organizations ID supplied"),
            @ApiResponse(code = 401, message = "Lol kek"),
            @ApiResponse(code = 404, message = "Organizations was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "/spring-data/getOrganizationsById/{id}", method = RequestMethod.GET)
    public ResponseEntity<HibernateOrganizations> getHibernateOrganizationsByIdRepository(@ApiParam("Path Id") @PathVariable Long id) {
        HibernateOrganizations t = hibernateOrganizationsRepository.findById(id).orElse(null);
        return new ResponseEntity<>(t, HttpStatus.OK);
    }

    /*Create */
    @PostMapping("/spring-data/create(converted)")
    @Transactional
    public ResponseEntity<HibernateOrganizations> createConvertedHibernateOrganizations(@RequestBody @Valid OrganizationsCreateRequest request) {
        //HibernateTasks savedConvertedTasks = conversionService.convert(request, HibernateTasks.class);
        return new ResponseEntity<>(hibernateOrganizationsRepository.saveAndFlush(conversionService.convert(request, HibernateOrganizations.class)), CREATED);
    }

    /*Update*/
    @ApiOperation(value = "Update Organizations by ID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful Organizations update"),
            @ApiResponse(code = 400, message = "Invalid Organizations ID supplied"),
            @ApiResponse(code = 404, message = "Organizations was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @PutMapping("/spring-data/update(converted)/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibernateOrganizations> updateHibernateOrganizationsRepository(@RequestBody @Valid OrganizationsUpdateRequest request) {
        return new ResponseEntity<>(hibernateOrganizationsRepository.save(conversionService.convert(request, HibernateOrganizations.class)), HttpStatus.OK);
    }

    /*Delete*/
    @DeleteMapping("/spring-data/delete/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteHibernateOrganizationsRepository(@PathVariable("id") Long id) {
        hibernateOrganizationsRepository.deleteById(id);
        return new ResponseEntity<>(id, HttpStatus.OK);
    }
}
